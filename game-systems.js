// –°–∏—Å—Ç–µ–º—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤, –≥–∏–ª—å–¥–∏–π –∏ PvP –¥—É—ç–ª–µ–π –¥–ª—è "–ü—É—Ç—å –ì–µ—Ä–æ—è"

// === PvP –°–ò–°–¢–ï–ú–ê –î–£–≠–õ–ï–ô ===
class PvPSystem {
    constructor() {
        this.activeDuels = new Map();
        this.duelQueue = [];
        this.duelQuestions = this.generateDuelQuestions();
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥—É—ç–ª–µ–π (–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ)
    generateDuelQuestions() {
        return [
            {
                question: "–í —Å–∏—Ç—É–∞—Ü–∏–∏, –≥–¥–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É —Å–ø–∞—Å–µ–Ω–∏–µ–º –æ–¥–Ω–æ–≥–æ –±–ª–∏–∑–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–µ–≤, —á—Ç–æ –≤—ã–±–µ—Ä–µ—Ç–µ?",
                options: [
                    "–°–ø–∞—Å–∞—é –±–ª–∏–∑–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞",
                    "–°–ø–∞—Å–∞—é –≥—Ä—É–ø–ø—É –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–µ–≤", 
                    "–ü—ã—Ç–∞—é—Å—å —Å–ø–∞—Å—Ç–∏ –≤—Å–µ—Ö, —Ä–∏—Å–∫—É—è —Å–æ–±–æ–π"
                ],
                correctAnswer: 2, // –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –ø–æ –ª–æ–≥–∏–∫–µ
                difficulty: "hard"
            },
            {
                question: "–í—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏, —á—Ç–æ –≤–∞—à –Ω–∞—á–∞–ª—å–Ω–∏–∫ –Ω–∞—Ä—É—à–∞–µ—Ç –∑–∞–∫–æ–Ω, –Ω–æ —ç—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –ø–æ–ª—å–∑—É –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤–∞—à–µ–π –∫–∞—Ä—å–µ—Ä–µ. –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è?",
                options: [
                    "–°–æ–æ–±—â–∞—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Ä–≥–∞–Ω—ã",
                    "–£–≥–æ–≤–∞—Ä–∏–≤–∞—é –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å—Å—è",
                    "–ú–æ–ª—á—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤—ã–≥–æ–¥–Ω–æ –≤—Å–µ–º"
                ],
                correctAnswer: 1,
                difficulty: "hard"
            },
            {
                question: "–í —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ä–µ—Å—É—Ä—Å—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–∞—Å–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑ –¥–≤—É—Ö –ª—é–¥–µ–π. –ö–æ–≥–æ –≤—ã–±–µ—Ä–µ—Ç–µ?",
                options: [
                    "–ú–æ–ª–æ–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º",
                    "–ü–æ–∂–∏–ª–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å –æ–ø—ã—Ç–æ–º",
                    "–ë—Ä–æ—Å–∞—é –∂—Ä–µ–±–∏–π"
                ],
                correctAnswer: 2,
                difficulty: "extreme"
            }
        ];
    }

    // –°–æ–∑–¥–∞—Ç—å –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å
    createChallenge(challenger, target, bet = 100) {
        const challenge = {
            id: Date.now() + Math.random(),
            challenger: challenger,
            target: target,
            bet: bet,
            status: 'pending',
            createdAt: Date.now()
        };
        
        this.duelQueue.push(challenge);
        return challenge;
    }

    // –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤
    acceptChallenge(challengeId, target) {
        const challenge = this.duelQueue.find(c => c.id === challengeId);
        if (!challenge || challenge.target !== target) return false;

        challenge.status = 'accepted';
        challenge.acceptedAt = Date.now();
        
        // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –¥—É—ç–ª—å
        const duel = {
            id: challengeId,
            challenger: challenge.challenger,
            target: challenge.target,
            bet: challenge.bet,
            questions: this.getRandomQuestions(10),
            challengerScore: 0,
            targetScore: 0,
            currentQuestion: 0,
            status: 'active',
            startTime: Date.now()
        };

        this.activeDuels.set(challengeId, duel);
        return duel;
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –¥—É—ç–ª–∏
    getRandomQuestions(count) {
        const shuffled = [...this.duelQuestions].sort(() => 0.5 - Math.random());
        return shuffled.slice(0, count);
    }

    // –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥—É—ç–ª–∏
    answerDuelQuestion(duelId, playerId, answerIndex, timeSpent) {
        const duel = this.activeDuels.get(duelId);
        if (!duel || duel.status !== 'active') return null;

        const question = duel.questions[duel.currentQuestion];
        const isChallenger = playerId === duel.challenger;
        
        // –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ (–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        const score = this.evaluateAnswer(answerIndex, question, timeSpent);
        
        if (isChallenger) {
            duel.challengerScore += score;
        } else {
            duel.targetScore += score;
        }

        duel.currentQuestion++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –¥—É—ç–ª—å
        if (duel.currentQuestion >= duel.questions.length) {
            return this.finishDuel(duelId);
        }

        return {
            type: 'answer',
            score: score,
            currentScore: isChallenger ? duel.challengerScore : duel.targetScore,
            nextQuestion: duel.questions[duel.currentQuestion]
        };
    }

    // –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞
    evaluateAnswer(answerIndex, question, timeSpent) {
        let baseScore = 10;
        
        // –ë–æ–Ω—É—Å –∑–∞ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
        if (timeSpent < 5000) baseScore += 5;
        if (timeSpent < 3000) baseScore += 5;
        
        // –ë–æ–Ω—É—Å –∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        if (question.difficulty === 'hard') baseScore += 10;
        if (question.difficulty === 'extreme') baseScore += 20;
        
        // –õ–æ–≥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞
        const logicBonus = this.evaluateLogic(answerIndex, question);
        
        return baseScore + logicBonus;
    }

    // –û—Ü–µ–Ω–∫–∞ –ª–æ–≥–∏–∫–∏ –æ—Ç–≤–µ—Ç–∞
    evaluateLogic(answerIndex, question) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –æ—Ü–µ–Ω–∫–∏
        const logicScores = [5, 15, 10]; // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        return logicScores[answerIndex] || 5;
    }

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥—É—ç–ª—å
    finishDuel(duelId) {
        const duel = this.activeDuels.get(duelId);
        if (!duel) return null;

        const winner = duel.challengerScore > duel.targetScore ? duel.challenger : duel.target;
        const loser = winner === duel.challenger ? duel.target : duel.challenger;

        duel.status = 'finished';
        duel.winner = winner;
        duel.finalScore = {
            challenger: duel.challengerScore,
            target: duel.targetScore
        };

        return {
            type: 'finished',
            winner: winner,
            loser: loser,
            finalScore: duel.finalScore,
            bet: duel.bet
        };
    }
}

// === –°–ò–°–¢–ï–ú–ê –¢–£–†–ù–ò–†–û–í ===
class TournamentSystem {
    constructor() {
        this.tournaments = new Map();
        this.activeTournaments = new Map();
        this.initializeTournaments();
    }

    initializeTournaments() {
        // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –º—É–¥—Ä–æ—Å—Ç–∏
        this.createTournament({
            id: 'weekly_wisdom',
            name: 'üî• –ò—Å–ø—ã—Ç–∞–Ω–∏–µ –ú—É–¥—Ä–æ—Å—Ç–∏',
            description: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –Ω–∞ –ª—É—á—à–∏–µ —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –º–æ—Ä–∞–ª—å–Ω—ã—Ö –¥–∏–ª–µ–º–º',
            type: 'weekly',
            duration: 7 * 24 * 60 * 60 * 1000, // 7 –¥–Ω–µ–π
            prize: { xp: 5000, title: '–ú—É–¥—Ä–µ—Ü –Ω–µ–¥–µ–ª–∏', coins: 1000 },
            requirements: { level: 5 },
            maxParticipants: 100,
            questionsPerRound: 15
        });

        // –ú–µ—Å—è—á–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä —Ç–∏—Ç–∞–Ω–æ–≤
        this.createTournament({
            id: 'monthly_titans',
            name: '‚ö° –ë–∏—Ç–≤–∞ –¢–∏—Ç–∞–Ω–æ–≤',
            description: '–ú–µ—Å—è—á–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞',
            type: 'monthly',
            duration: 30 * 24 * 60 * 60 * 1000, // 30 –¥–Ω–µ–π
            prize: { xp: 20000, title: '–¢–∏—Ç–∞–Ω', coins: 5000, special: '–ó–æ–ª–æ—Ç–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞' },
            requirements: { level: 20 },
            maxParticipants: 50,
            questionsPerRound: 25
        });
    }

    createTournament(config) {
        const tournament = {
            ...config,
            participants: [],
            brackets: [],
            currentRound: 0,
            status: 'upcoming',
            startTime: null,
            endTime: null,
            questions: this.generateTournamentQuestions(config.questionsPerRound)
        };

        this.tournaments.set(config.id, tournament);
        return tournament;
    }

    generateTournamentQuestions(count) {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
        const questions = [];
        for (let i = 0; i < count; i++) {
            questions.push({
                question: `–¢—É—Ä–Ω–∏—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å ${i + 1}: ${this.getRandomScenario()}`,
                options: this.generateOptions(),
                difficulty: this.getRandomDifficulty(),
                points: 10 + (i * 2) // –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            });
        }
        return questions;
    }

    getRandomScenario() {
        const scenarios = [
            "–í —Å–∏—Ç—É–∞—Ü–∏–∏ –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–µ–∂–¥—É –ª–∏—á–Ω–æ–π –≤—ã–≥–æ–¥–æ–π –∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –±–ª–∞–≥–æ–º...",
            "–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ, –≤–ª–∏—è—é—â–µ–µ –Ω–∞ –∂–∏–∑–Ω–∏ –º–Ω–æ–≥–∏—Ö –ª—é–¥–µ–π...",
            "–í —É—Å–ª–æ–≤–∏—è—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏...",
            "–ü—Ä–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–∏ —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å—é..."
        ];
        return scenarios[Math.floor(Math.random() * scenarios.length)];
    }

    generateOptions() {
        return [
            "–í—ã–±–∏—Ä–∞—é –ø—É—Ç—å —á–µ—Å—Ç–∏ –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏",
            "–ò—â—É –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
            "–î–µ–π—Å—Ç–≤—É—é –≤ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞",
            "–°–ª–µ–¥—É—é –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –æ–ø—ã—Ç—É"
        ];
    }

    getRandomDifficulty() {
        const difficulties = ['medium', 'hard', 'extreme'];
        return difficulties[Math.floor(Math.random() * difficulties.length)];
    }

    // –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä
    registerForTournament(tournamentId, player) {
        const tournament = this.tournaments.get(tournamentId);
        if (!tournament || tournament.status !== 'upcoming') return false;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        if (!this.checkRequirements(player, tournament.requirements)) return false;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (tournament.participants.length >= tournament.maxParticipants) return false;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
        if (tournament.participants.find(p => p.id === player.id)) return false;

        tournament.participants.push({
            id: player.id,
            name: player.name,
            level: player.level,
            score: 0,
            eliminated: false
        });

        return true;
    }

    checkRequirements(player, requirements) {
        if (requirements.level && player.level < requirements.level) return false;
        if (requirements.honor && player.honor < requirements.honor) return false;
        if (requirements.wisdom && player.wisdom < requirements.wisdom) return false;
        return true;
    }

    // –ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
    startTournament(tournamentId) {
        const tournament = this.tournaments.get(tournamentId);
        if (!tournament || tournament.status !== 'upcoming') return false;

        tournament.status = 'active';
        tournament.startTime = Date.now();
        tournament.endTime = tournament.startTime + tournament.duration;

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É —Ç—É—Ä–Ω–∏—Ä–∞
        this.createBrackets(tournament);

        this.activeTournaments.set(tournamentId, tournament);
        return tournament;
    }

    createBrackets(tournament) {
        const participants = [...tournament.participants];
        const brackets = [];

        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        while (participants.length > 1) {
            const player1 = participants.splice(Math.floor(Math.random() * participants.length), 1)[0];
            const player2 = participants.splice(Math.floor(Math.random() * participants.length), 1)[0];
            
            brackets.push({
                round: 1,
                player1: player1,
                player2: player2,
                winner: null,
                status: 'pending'
            });
        }

        tournament.brackets = brackets;
    }

    // –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç—É—Ä–Ω–∏—Ä–∞
    answerTournamentQuestion(tournamentId, playerId, questionIndex, answerIndex, timeSpent) {
        const tournament = this.activeTournaments.get(tournamentId);
        if (!tournament || tournament.status !== 'active') return null;

        const question = tournament.questions[questionIndex];
        const participant = tournament.participants.find(p => p.id === playerId);
        
        if (!participant || participant.eliminated) return null;

        const score = this.evaluateTournamentAnswer(answerIndex, question, timeSpent);
        participant.score += score;

        return {
            score: score,
            totalScore: participant.score,
            nextQuestion: tournament.questions[questionIndex + 1]
        };
    }

    evaluateTournamentAnswer(answerIndex, question, timeSpent) {
        let score = question.points;
        
        // –ë–æ–Ω—É—Å—ã –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
        if (timeSpent < 3000) score += 5;
        if (timeSpent < 1000) score += 10;
        
        // –ë–æ–Ω—É—Å—ã –∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        if (question.difficulty === 'hard') score += 10;
        if (question.difficulty === 'extreme') score += 20;
        
        return score;
    }
}

// === –°–ò–°–¢–ï–ú–ê –ì–ò–õ–¨–î–ò–ô ===
class GuildSystem {
    constructor() {
        this.guilds = new Map();
        this.playerGuilds = new Map(); // playerId -> guildId
        this.initializeGuilds();
    }

    initializeGuilds() {
        const guilds = [
            {
                id: 'justice_knights',
                name: '‚öîÔ∏è –†—ã—Ü–∞—Ä–∏ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏',
                description: '–ì–∏–ª—å–¥–∏—è –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ü–µ–Ω–∏—Ç —á–µ—Å—Ç–Ω–æ—Å—Ç—å –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å',
                level: 8,
                maxMembers: 50,
                requirements: { honor: 30 },
                bonus: { honorMultiplier: 1.5, xpBonus: 20 },
                members: [],
                treasury: 10000,
                achievements: []
            },
            {
                id: 'wise_sages',
                name: 'üß† –ú—É–¥—Ä–µ—Ü—ã –ü—É—Ç–∏',
                description: '–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º—ã—Å–ª–∏—Ç–µ–ª–µ–π, –∏—â—É—â–∏—Ö –≥–ª—É–±–∏–Ω–Ω—ã–π —Å–º—ã—Å–ª',
                level: 7,
                maxMembers: 40,
                requirements: { wisdom: 25 },
                bonus: { wisdomMultiplier: 1.5, xpBonus: 15 },
                members: [],
                treasury: 8000,
                achievements: []
            },
            {
                id: 'power_warriors',
                name: 'üí™ –í–æ–∏–Ω—ã –°–∏–ª—ã',
                description: '–ì–∏–ª—å–¥–∏—è —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–∏–¥–µ—Ä–æ–≤',
                level: 9,
                maxMembers: 60,
                requirements: { power: 35 },
                bonus: { powerMultiplier: 1.5, xpBonus: 25 },
                members: [],
                treasury: 12000,
                achievements: []
            }
        ];

        guilds.forEach(guild => this.guilds.set(guild.id, guild));
    }

    // –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥–∏–ª—å–¥–∏—é
    joinGuild(guildId, player) {
        const guild = this.guilds.get(guildId);
        if (!guild) return { success: false, message: '–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        if (!this.checkGuildRequirements(player, guild.requirements)) {
            return { success: false, message: '–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≥–∏–ª—å–¥–∏–∏' };
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (guild.members.length >= guild.maxMembers) {
            return { success: false, message: '–ì–∏–ª—å–¥–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞' };
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —É–∂–µ –≤ –≥–∏–ª—å–¥–∏–∏
        if (this.playerGuilds.has(player.id)) {
            return { success: false, message: '–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏' };
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –≥–∏–ª—å–¥–∏—é
        guild.members.push({
            id: player.id,
            name: player.name,
            level: player.level,
            joinDate: Date.now(),
            contribution: 0,
            rank: 'member'
        });

        this.playerGuilds.set(player.id, guildId);

        return { success: true, message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ${guild.name}!` };
    }

    checkGuildRequirements(player, requirements) {
        if (requirements.honor && player.honor < requirements.honor) return false;
        if (requirements.wisdom && player.wisdom < requirements.wisdom) return false;
        if (requirements.power && player.power < requirements.power) return false;
        return true;
    }

    // –ü–æ–∫–∏–Ω—É—Ç—å –≥–∏–ª—å–¥–∏—é
    leaveGuild(playerId) {
        const guildId = this.playerGuilds.get(playerId);
        if (!guildId) return { success: false, message: '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏' };

        const guild = this.guilds.get(guildId);
        if (!guild) return { success: false, message: '–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };

        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –≥–∏–ª—å–¥–∏–∏
        guild.members = guild.members.filter(m => m.id !== playerId);
        this.playerGuilds.delete(playerId);

        return { success: true, message: '–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –≥–∏–ª—å–¥–∏—é' };
    }

    // –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã –≥–∏–ª—å–¥–∏–∏
    getGuildBonus(playerId) {
        const guildId = this.playerGuilds.get(playerId);
        if (!guildId) return null;

        const guild = this.guilds.get(guildId);
        return guild ? guild.bonus : null;
    }

    // –í–Ω–µ—Å—Ç–∏ –≤–∫–ª–∞–¥ –≤ –≥–∏–ª—å–¥–∏—é
    contributeToGuild(playerId, amount) {
        const guildId = this.playerGuilds.get(playerId);
        if (!guildId) return { success: false, message: '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏' };

        const guild = this.guilds.get(guildId);
        const member = guild.members.find(m => m.id === playerId);
        
        if (!member) return { success: false, message: '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' };

        guild.treasury += amount;
        member.contribution += amount;

        // –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ –∑–∞ –≤–∫–ª–∞–¥
        if (member.contribution >= 10000 && member.rank === 'member') {
            member.rank = 'veteran';
        } else if (member.contribution >= 50000 && member.rank === 'veteran') {
            member.rank = 'elite';
        }

        return { success: true, message: `–í–Ω–µ—Å–µ–Ω–æ ${amount} –≤ –∫–∞–∑–Ω—É –≥–∏–ª—å–¥–∏–∏` };
    }
}

// === –°–ò–°–¢–ï–ú–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô ===
class LimitationSystem {
    constructor() {
        this.dailyLimits = new Map(); // playerId -> { questions: 0, lastReset: timestamp }
        this.questionsPerDay = 20; // –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
        this.resetTime = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    canAnswerQuestion(playerId) {
        const playerLimits = this.dailyLimits.get(playerId);
        if (!playerLimits) return true; // –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –∏–≥—Ä–∞–µ—Ç

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
        if (Date.now() - playerLimits.lastReset > this.resetTime) {
            this.resetDailyLimits(playerId);
            return true;
        }

        return playerLimits.questions < this.questionsPerDay;
    }

    // –ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
    recordQuestionAnswer(playerId) {
        let playerLimits = this.dailyLimits.get(playerId);
        
        if (!playerLimits) {
            playerLimits = { questions: 0, lastReset: Date.now() };
        }

        playerLimits.questions++;
        this.dailyLimits.set(playerId, playerLimits);
    }

    // –°–±—Ä–æ—Å–∏—Ç—å –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    resetDailyLimits(playerId) {
        this.dailyLimits.set(playerId, { questions: 0, lastReset: Date.now() });
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
    getLimitsInfo(playerId) {
        const playerLimits = this.dailyLimits.get(playerId);
        if (!playerLimits) {
            return { questions: 0, limit: this.questionsPerDay, remaining: this.questionsPerDay };
        }

        const remaining = Math.max(0, this.questionsPerDay - playerLimits.questions);
        return {
            questions: playerLimits.questions,
            limit: this.questionsPerDay,
            remaining: remaining
        };
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞
    getTimeUntilReset(playerId) {
        const playerLimits = this.dailyLimits.get(playerId);
        if (!playerLimits) return 0;

        const timePassed = Date.now() - playerLimits.lastReset;
        return Math.max(0, this.resetTime - timePassed);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º
window.GameSystems = {
    PvPSystem,
    TournamentSystem,
    GuildSystem,
    LimitationSystem
}; 